/* Memory Spaces Definitions */
MEMORY
{
  RAM (xrw) :    ORIGIN = 0x20000000, LENGTH = 112K 
  CCMRAM (xrw) : ORIGIN = 0x10000000, LENGTH = 64K
  FLASH (rx) :   ORIGIN = 0x08040000, LENGTH = 768K
}  

/* Config Libraries */
GROUP(libgcc.a libc.a libnosys.a)

/* Linker script to place sections and symbol values. Should be used together
 * with other linker script that defines memory regions FLASH and RAM.
 * It references following symbols, which must be defined in code:
 *   Reset_Handler : Entry of reset handler
 * 
 * It defines following symbols, which code can use without definition:
 *   __exidx_start
 *   __exidx_end
 *   __etext
 *   __sdata
 *   __preinit_array_start
 *   __preinit_array_end
 *   __init_array_start
 *   __init_array_end
 *   __fini_array_start
 *   __fini_array_end
 *   __edata
 *   __bss_start__
 *   __bss_end__
 *   __end__
 *   end
 *   __HeapLimit
 *   __StackLimit
 *   __StackTop
 *   __stack
 */
ENTRY(Reset_Handler)

SECTIONS
{
	.text :
	{
		KEEP(*(.isr_vector))
		*(.text*)

		KEEP(*(.init))
		KEEP(*(.fini))

		/* .ctors */
		*crtbegin.o(.ctors)
		*crtbegin?.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)

		/* .dtors */
 		*crtbegin.o(.dtors)
 		*crtbegin?.o(.dtors)
 		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
 		*(SORT(.dtors.*))
 		*(.dtors)

		*(.rodata*)

		KEEP(*(.eh_frame*))
	} > FLASH

	.ARM.extab : 
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} > FLASH

	__exidx_start = .;
	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	} > FLASH
	__exidx_end = .;

	__etext = .;
	_sidata = .;
	
	.data : AT (__etext)
	{
		_sdata = .;
		*(vtable)
		*(.data*)

		. = ALIGN(4);
		/* preinit data */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);

		. = ALIGN(4);
		/* init data */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);


		. = ALIGN(4);
		/* finit data */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP(*(SORT(.fini_array.*)))
		KEEP(*(.fini_array))
		PROVIDE_HIDDEN (__fini_array_end = .);

		. = ALIGN(4);
		/* All data end */
		_edata = .;

	} > RAM


	.bss :
	{
		__bss_start__ = .;
		. = ALIGN(4);
        /* This is used by the startup in order to initialize the .bss secion */
        _sbss = .;
		
		*(.bss*)
		*(COMMON)
		__bss_end__ = .;
		. = ALIGN(4);
	    /* This is used by the startup in order to initialize the .bss secion */
   	 	_ebss = . ;
		
	} > RAM
	
	.heap :
	{
		__end__ = .;
		end = __end__;
		*(.heap*)
		__HeapLimit = .;
	} > RAM

    /* Now CCM load area */
    . = __etext + SIZEOF(.data) + SIZEOF(.jcr);
    _siccm = .;

    /* For arrays */
    .ccm  : AT (_siccm)
	{	    	   
        _sccm = .;          
  		. = ALIGN(4);
  		*(.ccm)
  		. = ALIGN(4);
        _eccm = .;          
	} > CCMRAM

    /* For C++ object */
    .ccmnoload (NOLOAD) :
    {              
        _sccmnoload = .;          
        . = ALIGN(4);
        *(.ccmnoload)
        . = ALIGN(4);
        __CCMHeapLimit = .;         
        _eccmnoload = .;          
    } > CCMRAM


    /* .stack_dummy section doesn't contains any symbols. It is only
     * used for linker to calculate size of stack sections, and assign
     * values to stack symbols later */
    .stack_dummy :
    {
        *(.stack*)
    } > CCMRAM


	/* Set stack top to end of CCRAM, and stack limit move down by
	 * size of stack_dummy section */
	__StackTopCCM = ORIGIN(CCMRAM) + LENGTH(CCMRAM);
	__StackLimit = __StackTopCCM - SIZEOF(.stack_dummy);
	PROVIDE(__stack = __StackTopCCM);
	
	/* Check if data + heap + stack exceeds RAM limit */
	ASSERT(__StackLimit >= __CCMHeapLimit, "region RAM overflowed with stack")
}